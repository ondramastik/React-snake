{"version":3,"sources":["domain/Direction.ts","domain/TileType.ts","service/HttpMapService.ts","components/menu/Menu.tsx","context/MapServiceContext.tsx","components/game/game-settings/GameSettings.tsx","service/SnakeService.ts","service/mock/MockedSnakeService.ts","context/SnakeServiceContext.tsx","components/game/game-field/GameFieldPresenter.tsx","components/game/Game.tsx","components/game/GameContainer.tsx","components/game/game-router/GameRouter.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","TileType","HttpMapService","axios","get","then","response","data","name","Menu","to","MapServiceContext","React","createContext","GameSettings","useState","mapService","mapList","setMapList","mapListLoaded","setMapListLoaded","speed","setSpeed","selectedMap","setSelectedMap","useEffect","list","htmlFor","id","type","onChange","event","value","parseInt","target","String","currentTarget","map","selected","SnakeService","_map","foodLocation","snakeTiles","score","tickNumber","error","errorCause","prevDirection","eatingAudio","Audio","deathAudio","this","startDirection","generateFoodLocation","tiles","startLocation","load","direction","Promise","resolve","reject","isValidDirection","newDirection","undefined","gameView","handleTick","e","message","play","getGameMeta","currentHeadPos","length","newPos","Top","X","Down","Left","Y","Right","validate","push","shift","nextTickIn","Error","Floor","Food","includes","filter","snakeLoc","x","tmp","randomIndex","y","max","Math","floor","random","MockedSnakeService","SnakeServiceContext","GameFieldPresenter","gameMap","gameMeta","style","position","row","Fragment","tile","className","top","left","location","Snake","Game","snakeService","useContext","setGameMeta","running","setRunning","nextDirection","setNextDirection","tickInProgress","setTickInProgress","restart","useCallback","reset","document","addEventListener","code","tick","meta","setTimeout","catch","getScore","hasError","getErrorCause","getMap","onClick","disabled","GameContainer","gameParams","useParams","setSnakeService","Provider","GameRouter","path","index","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ba0b272c.chunk.js","sourcesContent":["export enum Direction {\n  Top,\n  Down,\n  Left,\n  Right\n}","export enum TileType {\n  Empty,\n  Floor,\n  Wall,\n  Snake,\n  Food,\n}","import IMapService from \"../domain/service/IMapService\";\nimport axios from 'axios';\nimport GameMap from \"../domain/GameMap\";\n\nexport default class HttpMapService implements IMapService {\n\n    list(): Promise<string[]> {\n        return axios.get('/React-snake/resources/maps/maplist.json').then(response => response.data)\n    }\n\n    load(name: string): Promise<GameMap> {\n        return axios.get(`/React-snake/resources/maps/${name}.json`).then(response => response.data)\n    }\n\n}","import React, {FC} from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst Menu: FC = () =>\n    <ul>\n        <li>\n            <Link to=\"game\">Play</Link>\n        </li>\n        <li>\n            <Link to=\"map-editor\">Map editor</Link>\n        </li>\n    </ul>\n\nexport default Menu;\n","import React from \"react\"\nimport IMapService from \"../domain/service/IMapService\";\n\nexport const MapServiceContext = React.createContext<IMapService>({} as IMapService);","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport HttpMapService from \"../../../service/HttpMapService\";\nimport {Link} from \"react-router-dom\";\n\n\nconst GameSettings: FC = () => {\n    const [mapService] = useState(new HttpMapService())\n\n    const [mapList, setMapList] = useState<string[]>()\n    const [mapListLoaded, setMapListLoaded] = useState(false)\n\n    const [speed, setSpeed] = useState(1)\n    const [selectedMap, setSelectedMap] = useState<string>()\n\n    useEffect(() => {\n        if (!mapListLoaded) {\n            mapService.list()\n                .then(list => {\n                    setMapList(list)\n                    setSelectedMap(list[0])\n                })\n                .then(() => setMapListLoaded(true))\n        }\n    })\n\n    function handleSpeedChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = parseInt(event.target.value)\n        if (value >= 1 && value <= 10) {\n            setSpeed(value)\n        }\n    }\n\n    function handleMapChange(event: ChangeEvent<HTMLSelectElement>) {\n        setSelectedMap(String(event.currentTarget.value))\n    }\n\n    return (\n        <ul>\n            <li>\n                <label htmlFor=\"speed\">Speed:</label>\n                <input id=\"speed\" type=\"number\" onChange={handleSpeedChange} value={speed}/>\n            </li>\n            <li>\n                <label htmlFor=\"map\">Map:</label>\n                {mapListLoaded ? <select id=\"map\" onChange={handleMapChange}>\n                    {mapList?.map(map => <option selected={selectedMap === map} key={map} value={map}>{map}</option>)}\n                </select> : \"Loading map list..\"}\n            </li>\n            <li>\n                <Link to={`play/${selectedMap}/${speed}`}>Play</Link>\n            </li>\n        </ul>\n    );\n}\n\nexport default GameSettings;\n","import ISnakeService from \"../domain/service/SnakeService\";\nimport GameMeta from \"../domain/GameMeta\";\nimport {Direction} from \"../domain/Direction\";\nimport {TileType} from \"../domain/TileType\";\nimport Coordinates from \"../domain/Coordinates\";\nimport GameMap from \"../domain/GameMap\";\n\nexport default class SnakeService implements ISnakeService {\n\n    private readonly _map: GameMap\n\n    private readonly speed: number\n\n    private foodLocation: Coordinates\n\n    private snakeTiles: Coordinates[]\n\n    private score: number = 0\n\n    private tickNumber: number = 0\n\n    private error: boolean = false\n\n    private errorCause: string | undefined\n\n    private prevDirection: Direction\n\n    private eatingAudio = new Audio('/React-snake/resources/audio/eating.wav');\n    private deathAudio = new Audio('/React-snake/resources/audio/death.mp3');\n\n    constructor(map: GameMap, speed: number = 5) {\n        this._map = map\n        this.prevDirection = map.startDirection\n        this.foodLocation = SnakeService.generateFoodLocation(map.tiles)\n        this.snakeTiles = [{...map.startLocation}]\n        this.speed = speed\n        this.eatingAudio.load()\n        this.deathAudio.load()\n    }\n\n    getMap(): GameMap {\n        return this._map;\n    }\n\n    tick(direction?: Direction): Promise<GameMeta> {\n        return new Promise<GameMeta>((resolve, reject) => {\n            try {\n                const isValidDirection = SnakeService.isValidDirection(this.prevDirection, direction)\n                const newDirection = direction !== undefined && isValidDirection ? direction : this.prevDirection\n                const gameView = this.handleTick(newDirection)\n                this.prevDirection = newDirection\n                resolve(gameView)\n            } catch (e) {\n                this.error = true\n                this.errorCause = (e as Error).message\n                this.deathAudio.play()\n                reject(e)\n            }\n        })\n    }\n\n    reset(): Promise<GameMeta> {\n        this.snakeTiles = [{...this._map.startLocation}]\n        this.prevDirection = this._map.startDirection\n        this.foodLocation = SnakeService.generateFoodLocation(this._map.tiles)\n        this.score = 0\n        this.tickNumber = 0\n        this.error = false\n        this.errorCause = undefined\n\n        return Promise.resolve(this.getGameMeta())\n    }\n\n    getErrorCause(): string | undefined {\n        return this.errorCause;\n    }\n\n    getScore(): number {\n        return this.score;\n    }\n\n    getTickNumber(): number {\n        return this.tickNumber;\n    }\n\n    hasError(): boolean {\n        return this.error;\n    }\n\n\n    private handleTick(direction: Direction): GameMeta {\n        const currentHeadPos = this.snakeTiles[this.snakeTiles.length - 1]\n        const newPos = {...currentHeadPos}\n\n        switch (direction) {\n            case Direction.Top:\n                newPos.X -= 1\n                break;\n            case Direction.Down:\n                newPos.X += 1\n                break;\n            case Direction.Left:\n                newPos.Y -= 1\n                break;\n            case Direction.Right:\n                newPos.Y += 1\n                break;\n        }\n\n        this.validate(newPos)\n\n        this.snakeTiles.push(newPos)\n\n        if (this.foodLocation.X === newPos.X && this.foodLocation.Y === newPos.Y) {\n            this.eatingAudio.play()\n            this.foodLocation = SnakeService.generateFoodLocation(this._map.tiles)\n            this.score += this.speed\n        } else this.snakeTiles.shift()\n\n\n        return this.getGameMeta()\n    }\n\n    private getGameMeta(): GameMeta {\n        return {\n            snakeTiles: this.snakeTiles,\n            foodLocation: this.foodLocation,\n            nextTickIn: (11 - this.speed) * 25\n        }\n    }\n\n    private validate(newPos: Coordinates): void {\n        if (!this._map.tiles[newPos.X][newPos.Y]) {\n            throw Error(\"Player out of field\")\n        }\n        if (![TileType.Floor, TileType.Food].includes(this._map.tiles[newPos.X][newPos.Y])) {\n            throw Error(\"Player crashed\")\n        }\n        if (this.snakeTiles.filter(snakeLoc => snakeLoc.X === newPos.X && snakeLoc.Y === newPos.Y).length > 0) {\n            throw Error(\"The player ate himself\")\n        }\n    }\n\n    private static generateFoodLocation(tiles: TileType[][]): Coordinates {\n        let x: number = -1\n\n        while (true) {\n            let tmp = SnakeService.randomIndex(tiles.length)\n            if (tiles[tmp] !== undefined && tiles[tmp].includes(TileType.Floor)) {\n                x = tmp\n                break;\n            }\n        }\n\n        let y: number = -1\n\n        while (true) {\n            let tmp = SnakeService.randomIndex(tiles[x].length)\n            if (tiles[x][tmp] !== undefined && tiles[x][tmp] === TileType.Floor) {\n                y = tmp\n                break;\n            }\n        }\n\n        return {\n            X: x,\n            Y: y\n        }\n    }\n\n    private static randomIndex(max: number): number {\n        return Math.floor((Math.random() * max))\n    }\n\n    private static isValidDirection(prevDirection?: Direction, newDirection?: Direction): boolean {\n        switch (newDirection) {\n            case Direction.Left:\n                if (prevDirection === Direction.Right)\n                    return false\n                break\n            case Direction.Top:\n                if (prevDirection === Direction.Down)\n                    return false\n                break\n            case Direction.Right:\n                if (prevDirection === Direction.Left)\n                    return false\n                break\n            case Direction.Down:\n                if (prevDirection === Direction.Top)\n                    return false\n                break\n        }\n        return true\n    }\n\n\n}","import ISnakeService from \"../../domain/service/SnakeService\";\nimport GameMeta from \"../../domain/GameMeta\";\nimport {Direction} from \"../../domain/Direction\";\nimport GameMap from \"../../domain/GameMap\";\n\n\nexport default class MockedSnakeService implements ISnakeService {\n\n    getMap(): GameMap {\n        return {} as GameMap;\n    }\n\n    tick(direction?: Direction): Promise<GameMeta> {\n        return Promise.resolve({tiles: [], snakeTiles: [], foodLocation: {X: 1, Y: 1}, nextTickIn: 50})\n    }\n\n    reset(): Promise<GameMeta> {\n        return Promise.resolve({tiles: [], snakeTiles: [], foodLocation: {X: 1, Y: 1}, nextTickIn: 50})\n    }\n\n    getErrorCause(): string | undefined {\n        return undefined;\n    }\n\n    getScore(): number {\n        return 0;\n    }\n\n    getTickNumber(): number {\n        return 0;\n    }\n\n    hasError(): boolean {\n        return false;\n    }\n\n}","import React from \"react\"\nimport ISnakeService from \"../domain/service/SnakeService\";\nimport MockedSnakeService from \"../service/mock/MockedSnakeService\";\n\nexport const SnakeServiceContext = React.createContext<ISnakeService>(new MockedSnakeService())","import React, {FC} from 'react';\nimport './GameFieldPresenter.css';\nimport GameMeta from \"../../../domain/GameMeta\";\nimport {TileType} from \"../../../domain/TileType\";\nimport GameMap from \"../../../domain/GameMap\";\n\ninterface Props {\n    gameMap: GameMap\n    gameMeta: GameMeta\n}\n\n\nconst GameFieldPresenter: FC<Props> = ({gameMap, gameMeta}) => {\n    return <div id=\"game-field-presenter\" style={{position: \"relative\"}}>\n        {gameMap.tiles.map(\n            (row, x) => <React.Fragment>\n                {row.map((tile, y) => <div\n                    className={`tile tile-${gameMap.tiles[x][y]}`} key={`${x}-${y}`}/>)}\n                <div/>\n            </React.Fragment>)}\n        <div style={{position: \"absolute\", top: 20 * gameMeta.foodLocation.X, left: 20 * gameMeta.foodLocation.Y}}\n             className={`tile tile-${TileType.Food}`}/>\n        {gameMeta.snakeTiles.map(location => <div\n            style={{position: \"absolute\", top: 20 * location.X, left: 20 * location.Y}}\n            className={`tile tile-${TileType.Snake}`}\n            key={`snake-${location.X}-${location.Y}`}/>)}\n    </div>\n}\n\nexport default GameFieldPresenter\n","import React, {FC, useCallback, useContext, useEffect, useState} from 'react';\nimport GameMeta from \"../../domain/GameMeta\";\nimport ISnakeService from \"../../domain/service/SnakeService\";\nimport {SnakeServiceContext} from \"../../context/SnakeServiceContext\";\nimport GameFieldPresenter from \"./game-field/GameFieldPresenter\";\nimport {Direction} from \"../../domain/Direction\";\n\n\nconst Game: FC = () => {\n    const snakeService: ISnakeService = useContext(SnakeServiceContext)\n\n    const [gameMeta, setGameMeta] = useState<GameMeta | undefined>()\n\n    const [running, setRunning] = useState(true)\n\n    const [nextDirection, setNextDirection] = useState<Direction>()\n    const [tickInProgress, setTickInProgress] = useState<boolean>(false)\n\n    const restart = useCallback(() => {\n        snakeService.reset()\n            .then(gameView => setGameMeta(gameView))\n\n        setRunning(true)\n        setNextDirection(undefined)\n        setTickInProgress(false)\n    }, [snakeService])\n\n    useEffect(() => {\n        document.addEventListener('keydown', function (e) {\n            let newDirection: Direction | undefined = undefined\n            switch (e.code) {\n                case \"ArrowLeft\":\n                    newDirection = Direction.Left\n                    break;\n                case \"ArrowUp\":\n                    newDirection = Direction.Top\n                    break;\n                case \"ArrowRight\":\n                    newDirection = Direction.Right\n                    break;\n                case \"ArrowDown\":\n                    newDirection = Direction.Down\n                    break;\n                case \"Space\":\n                    restart()\n                    break;\n            }\n\n            if (newDirection !== undefined) {\n                setNextDirection(newDirection)\n            }\n        })\n    }, [restart])\n\n    useEffect(() => {\n        if (running && !tickInProgress) {\n            setTickInProgress(true)\n            snakeService\n                .tick(nextDirection)\n                .then(meta => setTimeout(() => setGameMeta(meta), meta.nextTickIn))\n                .then(() => setTickInProgress(false))\n                .catch(() => {\n                    setRunning(false)\n                })\n        }\n    }, [gameMeta])\n\n\n    return <div id=\"game\">\n        <h1>Score: {snakeService.getScore()}</h1>\n        {snakeService.hasError() && <h1>Error: {snakeService.getErrorCause()}</h1>}\n        {gameMeta && <GameFieldPresenter gameMap={snakeService.getMap()} gameMeta={gameMeta}/>}\n        <button onClick={() => restart()} disabled={running}>Restart</button>\n    </div>\n}\n\nexport default Game\n","import React, {FC, useContext, useEffect, useState} from 'react';\nimport ISnakeService from \"../../domain/service/SnakeService\";\nimport {useParams} from \"react-router-dom\";\nimport IMapService from \"../../domain/service/IMapService\";\nimport {MapServiceContext} from \"../../context/MapServiceContext\";\nimport SnakeService from \"../../service/SnakeService\";\nimport Game from \"./Game\";\nimport {SnakeServiceContext} from \"../../context/SnakeServiceContext\";\n\ninterface GameParams {\n    map: string\n    speed: number\n}\n\nconst GameContainer: FC = () => {\n    const gameParams = useParams<keyof GameParams>()\n\n    const mapService: IMapService = useContext(MapServiceContext)\n    const [snakeService, setSnakeService] = useState<ISnakeService>()\n\n    useEffect(() => {\n        if (!snakeService) {\n            mapService.load(gameParams.map!)\n                .then(map => setSnakeService(new SnakeService(map, parseInt(gameParams.speed!))))\n        }\n    })\n\n    return <div id=\"game-container\">\n        {snakeService && <SnakeServiceContext.Provider value={snakeService}>\n            <Game/>\n        </SnakeServiceContext.Provider>}\n    </div>\n}\n\nexport default GameContainer\n","import React, {FC, useState} from 'react';\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport HttpMapService from \"../../../service/HttpMapService\";\nimport Menu from \"../../menu/Menu\";\nimport {MapServiceContext} from \"../../../context/MapServiceContext\";\nimport GameSettings from \"../game-settings/GameSettings\";\nimport GameContainer from \"../GameContainer\";\n\nconst GameRouter: FC = () => {\n    const [mapService] = useState(new HttpMapService())\n\n    return (\n        <BrowserRouter>\n            <MapServiceContext.Provider value={mapService}>\n                <Routes>\n                    <Route path=\"/React-snake/\">\n                        <Route index element={<Menu/>}/>\n                        <Route path=\"game\">\n                            <Route index element={<GameSettings/>}/>\n                            <Route path=\"play/:map/:speed\" element={<GameContainer/>}/>\n                        </Route>\n                        <Route path=\"map-editor\" element={\"<MapEditor/>\"}/>\n                    </Route>\n                </Routes>\n            </MapServiceContext.Provider>\n        </BrowserRouter>\n    );\n}\n\nexport default GameRouter;\n","import React from 'react';\nimport GameRouter from \"./game/game-router/GameRouter\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <GameRouter/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}