{"version":3,"sources":["domain/Direction.ts","domain/TileType.ts","service/SnakeService.ts","service/mock/MockedSnakeService.ts","context/SnakeServiceContext.tsx","components/game/game-field/GameFieldPresenter.tsx","components/game/Game.tsx","context/MapServiceContext.tsx","service/HttpMapService.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","TileType","SnakeService","map","speed","_map","foodLocation","snakeTiles","score","tickNumber","error","errorCause","eatingAudio","Audio","deathAudio","this","generateFoodLocation","tiles","startLocation","direction","Promise","resolve","reject","handleTick","undefined","startDirection","e","message","play","getGameMeta","currentHeadPos","length","newPos","Top","X","Down","Left","Y","Right","validate","push","shift","nextTickIn","Error","Floor","Food","includes","filter","snakeLoc","x","tmp","randomIndex","console","log","y","max","Math","floor","random","MockedSnakeService","SnakeServiceContext","React","createContext","GameFieldPresenter","gameMap","gameMeta","id","style","position","row","Fragment","tile","className","top","left","location","Snake","Game","snakeService","useContext","useState","setGameMeta","running","setRunning","nextDirection","setNextDirection","tickInProgress","setTickInProgress","restart","useCallback","reset","then","gameView","prevDirection","newDirection","useEffect","document","addEventListener","code","tick","meta","setTimeout","catch","getTickNumber","getScore","hasError","getErrorCause","getMap","onClick","disabled","MapServiceContext","HttpMapService","axios","get","response","data","name","App","mapService","setSnakeService","load","Provider","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.451dac3c.chunk.js","sourcesContent":["export enum Direction {\n  Top,\n  Down,\n  Left,\n  Right\n}","export enum TileType {\n  Empty,\n  Floor,\n  Wall,\n  Snake,\n  Food,\n}","import ISnakeService from \"../domain/service/SnakeService\";\nimport GameMeta from \"../domain/GameMeta\";\nimport {Direction} from \"../domain/Direction\";\nimport {TileType} from \"../domain/TileType\";\nimport Coordinates from \"../domain/Coordinates\";\nimport GameMap from \"../domain/GameMap\";\n\nexport default class SnakeService implements ISnakeService {\n\n    private _map: GameMap\n\n    private foodLocation: Coordinates\n\n    private snakeTiles: Coordinates[]\n\n    private score: number = 0\n\n    private tickNumber: number = 0\n\n    private error: boolean = false\n\n    private errorCause: string | undefined\n\n    private speed: number\n\n    private eatingAudio = new Audio('React-snake/resources/audio/eating.wav');\n    private deathAudio = new Audio('React-snake/resources/audio/death.mp3');\n\n    constructor(map: GameMap, speed: number = 5) {\n        this._map = map\n        this.foodLocation = SnakeService.generateFoodLocation(map.tiles)\n        this.snakeTiles = [{...map.startLocation}]\n        this.speed = speed\n    }\n\n    getMap(): GameMap {\n        return this._map;\n    }\n\n    tick(direction?: Direction): Promise<GameMeta> {\n        return new Promise<GameMeta>((resolve, reject) => {\n            try {\n                const gameView = this.handleTick(direction !== undefined ? direction : this._map.startDirection)\n                resolve(gameView)\n            } catch (e) {\n                this.error = true\n                this.errorCause = (e as Error).message\n                this.deathAudio.play()\n                reject(e)\n            }\n        })\n    }\n\n    reset(): Promise<GameMeta> {\n        this.snakeTiles = [{...this._map.startLocation}]\n        this.foodLocation = SnakeService.generateFoodLocation(this._map.tiles)\n        this.score = 0\n        this.tickNumber = 0\n        this.error = false\n        this.errorCause = undefined\n\n        return Promise.resolve(this.getGameMeta())\n    }\n\n    getErrorCause(): string | undefined {\n        return this.errorCause;\n    }\n\n    getScore(): number {\n        return this.score;\n    }\n\n    getTickNumber(): number {\n        return this.tickNumber;\n    }\n\n    hasError(): boolean {\n        return this.error;\n    }\n\n\n    private handleTick(direction: Direction): GameMeta {\n        const currentHeadPos = this.snakeTiles[this.snakeTiles.length - 1]\n        const newPos = {...currentHeadPos}\n\n        switch (direction) {\n            case Direction.Top:\n                newPos.X -= 1\n                break;\n            case Direction.Down:\n                newPos.X += 1\n                break;\n            case Direction.Left:\n                newPos.Y -= 1\n                break;\n            case Direction.Right:\n                newPos.Y += 1\n                break;\n        }\n\n        this.validate(newPos)\n\n        this.snakeTiles.push(newPos)\n\n        if (this.foodLocation.X === newPos.X && this.foodLocation.Y === newPos.Y) {\n            this.eatingAudio.play()\n            this.foodLocation = SnakeService.generateFoodLocation(this._map.tiles)\n            this.score += this.speed\n        } else this.snakeTiles.shift()\n\n\n        return this.getGameMeta()\n    }\n\n    private getGameMeta(): GameMeta {\n        return {\n            snakeTiles: this.snakeTiles,\n            foodLocation: this.foodLocation,\n            nextTickIn: (11 - this.speed) * 25\n        }\n    }\n\n    private validate(newPos: Coordinates): void {\n        if (!this._map.tiles[newPos.X][newPos.Y]) {\n            throw Error(\"Player out of field\")\n        }\n        if (![TileType.Floor, TileType.Food].includes(this._map.tiles[newPos.X][newPos.Y])) {\n            throw Error(\"Player crashed\")\n        }\n        if (this.snakeTiles.filter(snakeLoc => snakeLoc.X === newPos.X && snakeLoc.Y === newPos.Y).length > 0) {\n            throw Error(\"The player ate himself\")\n        }\n    }\n\n    private static generateFoodLocation(tiles: TileType[][]): Coordinates {\n        let x: number = -1\n\n        while (true) {\n            let tmp = SnakeService.randomIndex(tiles.length)\n            console.log(tiles[tmp])\n            if (tiles[tmp] !== undefined && tiles[tmp].includes(TileType.Floor)) {\n                x = tmp\n                break;\n            }\n        }\n\n        let y: number = -1\n\n        while (true) {\n            let tmp = SnakeService.randomIndex(tiles[x].length)\n            console.log(tiles[x][tmp])\n            if (tiles[x][tmp] !== undefined && tiles[x][tmp] === TileType.Floor) {\n                y = tmp\n                break;\n            }\n        }\n\n        return {\n            X: x,\n            Y: y\n        }\n    }\n\n    private static randomIndex(max: number): number {\n        return Math.floor((Math.random() * max))\n    }\n\n\n}","import ISnakeService from \"../../domain/service/SnakeService\";\nimport GameMeta from \"../../domain/GameMeta\";\nimport {Direction} from \"../../domain/Direction\";\nimport GameMap from \"../../domain/GameMap\";\n\n\nexport default class MockedSnakeService implements ISnakeService {\n\n    getMap(): GameMap {\n        return {} as GameMap;\n    }\n\n    tick(direction?: Direction): Promise<GameMeta> {\n        return Promise.resolve({tiles: [], snakeTiles: [], foodLocation: {X: 1, Y: 1}, nextTickIn: 50})\n    }\n\n    reset(): Promise<GameMeta> {\n        return Promise.resolve({tiles: [], snakeTiles: [], foodLocation: {X: 1, Y: 1}, nextTickIn: 50})\n    }\n\n    getErrorCause(): string | undefined {\n        return undefined;\n    }\n\n    getScore(): number {\n        return 0;\n    }\n\n    getTickNumber(): number {\n        return 0;\n    }\n\n    hasError(): boolean {\n        return false;\n    }\n\n}","import React from \"react\"\nimport ISnakeService from \"../domain/service/SnakeService\";\nimport MockedSnakeService from \"../service/mock/MockedSnakeService\";\n\nexport const SnakeServiceContext = React.createContext<ISnakeService>(new MockedSnakeService())","import React, {FC} from 'react';\nimport './GameFieldPresenter.css';\nimport GameMeta from \"../../../domain/GameMeta\";\nimport {TileType} from \"../../../domain/TileType\";\nimport GameMap from \"../../../domain/GameMap\";\n\ninterface Props {\n    gameMap: GameMap\n    gameMeta: GameMeta\n}\n\n\nconst GameFieldPresenter: FC<Props> = ({gameMap, gameMeta}) => {\n    return <div id=\"game-field-presenter\" style={{position: \"relative\"}}>\n        {gameMap.tiles.map(\n            (row, x) => <React.Fragment>\n                {row.map((tile, y) => <div\n                    className={`tile tile-${gameMap.tiles[x][y]}`} key={`${x}-${y}`}/>)}\n                <div/>\n            </React.Fragment>)}\n        <div style={{position: \"absolute\", top: 20 * gameMeta.foodLocation.X, left: 20 * gameMeta.foodLocation.Y}}\n             className={`tile tile-${TileType.Food}`}/>\n        {gameMeta.snakeTiles.map(location => <div\n            style={{position: \"absolute\", top: 20 * location.X, left: 20 * location.Y}}\n            className={`tile tile-${TileType.Snake}`}\n            key={`snake-${location.X}-${location.Y}`}/>)}\n    </div>\n}\n\nexport default GameFieldPresenter\n","import React, {FC, useCallback, useContext, useEffect, useState} from 'react';\nimport GameMeta from \"../../domain/GameMeta\";\nimport ISnakeService from \"../../domain/service/SnakeService\";\nimport {SnakeServiceContext} from \"../../context/SnakeServiceContext\";\nimport GameFieldPresenter from \"./game-field/GameFieldPresenter\";\nimport {Direction} from \"../../domain/Direction\";\n\n\nconst Game: FC = () => {\n    const snakeService: ISnakeService = useContext(SnakeServiceContext)\n\n    const [gameMeta, setGameMeta] = useState<GameMeta | undefined>()\n\n    const [running, setRunning] = useState(true)\n\n    const [nextDirection, setNextDirection] = useState<Direction>()\n    const [tickInProgress, setTickInProgress] = useState<boolean>(false)\n\n    const restart = useCallback(() => {\n        snakeService.reset()\n            .then(gameView => setGameMeta(gameView))\n\n        setRunning(true)\n        setNextDirection(undefined)\n        setTickInProgress(false)\n    }, [snakeService])\n\n    const isValidDirection = useCallback((prevDirection?: Direction, newDirection?: Direction) => {\n        switch (newDirection) {\n            case Direction.Left:\n                if (prevDirection === Direction.Right)\n                    return false\n                break\n            case Direction.Top:\n                if (prevDirection === Direction.Down)\n                    return false\n                break\n            case Direction.Right:\n                if (prevDirection === Direction.Left)\n                    return false\n                break\n            case Direction.Down:\n                if (prevDirection === Direction.Top)\n                    return false\n                break\n        }\n        return true\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('keydown', function (e) {\n            let newDirection: Direction | undefined = undefined\n            switch (e.code) {\n                case \"ArrowLeft\":\n                    newDirection = Direction.Left\n                    break;\n                case \"ArrowUp\":\n                    newDirection = Direction.Top\n                    break;\n                case \"ArrowRight\":\n                    newDirection = Direction.Right\n                    break;\n                case \"ArrowDown\":\n                    newDirection = Direction.Down\n                    break;\n                case \"Space\":\n                    console.log(\"Space\")\n                    restart()\n                    break;\n            }\n\n            if (newDirection !== undefined) {\n                setNextDirection(newDirection)\n            }\n        })\n    }, [restart])\n\n    useEffect(() => {\n        if (running && !tickInProgress) {\n            setTickInProgress(true)\n            snakeService\n                .tick(nextDirection)\n                .then(meta => setTimeout(() => setGameMeta(meta), meta.nextTickIn))\n                .then(() => setTickInProgress(false))\n                .catch(() => {\n                    setRunning(false)\n                })\n        }\n    }, [gameMeta])\n\n\n    return <div id=\"game\">\n        <h1>Tick: {snakeService.getTickNumber()}, Score: {snakeService.getScore()}</h1>\n        {snakeService.hasError() && <h1>Error: {snakeService.getErrorCause()}</h1>}\n        {gameMeta && <GameFieldPresenter gameMap={snakeService.getMap()} gameMeta={gameMeta}/>}\n        <button onClick={() => restart()} disabled={running}>Restart</button>\n    </div>\n}\n\nexport default Game\n","import React from \"react\"\nimport IMapService from \"../domain/service/IMapService\";\n\nexport const MapServiceContext = React.createContext<IMapService>({} as IMapService);","import IMapService from \"../domain/service/IMapService\";\nimport {TileType} from \"../domain/TileType\";\nimport axios from 'axios';\n\nexport default class HttpMapService implements IMapService {\n\n    list(): Promise<string[]> {\n        return axios.get('/React-snake/resources/maps/maplist.json').then(response => response.data)\n    }\n\n    load(name: string): Promise<TileType[][]> {\n        return axios.get(`/React-snake/resources/maps/${name}.json`).then(response => response.data)\n    }\n\n}","import React, {useEffect, useState} from 'react';\nimport SnakeService from \"../service/SnakeService\";\nimport {Direction} from \"../domain/Direction\";\nimport Game from \"./game/Game\";\nimport {SnakeServiceContext} from \"../context/SnakeServiceContext\";\nimport {MapServiceContext} from \"../context/MapServiceContext\";\nimport HttpMapService from \"../service/HttpMapService\";\nimport ISnakeService from \"../domain/service/SnakeService\";\n\nfunction App() {\n    const [mapService] = useState(new HttpMapService())\n    const [snakeService, setSnakeService] = useState<ISnakeService>()\n\n    useEffect(() => {\n        if (!snakeService) {\n            mapService.load(\"map1\")\n                .then(map => setSnakeService(new SnakeService({\n                    tiles: map,\n                    startLocation: {\n                        X: 1,\n                        Y: 1\n                    },\n                    startDirection: Direction.Down\n                })))\n        }\n    })\n\n    return (\n        <div className=\"App\">\n            {snakeService && <SnakeServiceContext.Provider value={snakeService}>\n                <MapServiceContext.Provider value={mapService}>\n                    <Game />\n                </MapServiceContext.Provider>\n            </SnakeServiceContext.Provider>}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}